#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *rchild;
    struct Node *lchild;
}*root=NULL;

void Insert(int element) {
    struct Node *newnode, *p;
    struct Node *t=root;
    if(t==NULL) {
        newnode=(struct Node *)malloc(sizeof(struct Node));
        newnode->data=element;
        newnode->lchild=newnode->rchild=NULL;
        root=newnode;
        return;
    }
    while(t!=NULL) {
        p=t;
        if(element < p->data)
            t=p->lchild;

        else
            t=p->rchild;
    }
    newnode=(struct Node *)malloc(sizeof(struct Node));
    newnode->data=element;
    newnode->lchild=newnode->rchild=NULL;
    if(element < p->data)
        p->lchild=newnode;
    else
        p->rchild=newnode;
}

struct Node * RInsert(struct Node *t, int element) {
    struct Node *newnode, *p;
    if(t==NULL) {
        newnode=(struct Node *)malloc(sizeof(struct Node));
        newnode->data=element;
        newnode->lchild=newnode->rchild=NULL;
        return newnode;
    }

        if(element < t->data)
            t->lchild=RInsert(t->lchild, element);
        else
            t->rchild=RInsert(t->rchild, element);
  return t;
}

void InOrder(struct Node *p) {
    if(p!=NULL) {
        InOrder(p->lchild);
        printf("%d ", p->data);
        InOrder(p->rchild);
    }
}

void PreOrder(struct Node *p) {
    if(p!=NULL) {
        printf("%d ", p->data);
        PreOrder(p->lchild);
        PreOrder(p->rchild);
    }
}

void PostOrder(struct Node *p) {
    if(p!=NULL) {
        PostOrder(p->lchild);
        PostOrder(p->rchild);
        printf("%d ", p->data);
    }

}

struct Node * search(int key) {
    struct Node *p=root;
    while(p) {
        if(key < p->data)
            p=p->lchild;
        else if(key > p->data)
            p=p->rchild;
        else
            return p;
    }
    return NULL;
}

int height(struct Node *p) {
    int x,y;
    if(p==NULL)
        return 0;
    x=height(p->lchild);
    y=height(p->rchild);
    return x>y?x+1:y+1;
}

struct Node * InSucc(struct Node *p) {
    while(p && p->lchild!=NULL)
        p=p->lchild;
    return p;
}

struct Node * InPre(struct Node *p) {
    while(p && p->rchild!=NULL)
        p=p->rchild;
    return p;
}

struct Node * delete(struct Node *p, int key) {
    struct Node *q;
    if(p==NULL)
        return NULL;
    if(p->lchild==NULL && p->rchild==NULL) {
        if(p==root)
            root=NULL;
        free(p);
        return NULL;
    }
    if(key < p->data)
        p->lchild=delete(p->lchild, key);
    else if(key > p->data)
        p->rchild=delete(p->rchild, key);
    else {
        if(height(p->lchild) > height(p->rchild)) {
            q=InPre(p->lchild);
            p->data=q->data;
            p->lchild=delete(p->lchild, q->data);
        }
        else {
            q=InSucc(p->rchild);
            p->data=q->data;
            p->rchild=delete(p->rchild, q->data);
        }
    }
}


void main()
{
    struct Node *temp;
    int key=26;
    root=RInsert(root, 5);
    RInsert(root, 55);
    RInsert(root, 25);
    RInsert(root, 56);
    RInsert(root, 78);
    RInsert(root, 75);
    RInsert(root, 15);
    printf("InOrder: ");
    InOrder(root);
    printf("\nPreOrder: ");
    PreOrder(root);
    printf("\nPostOrder: ");
    PostOrder(root);
    temp=search(key);
    if(temp)
        printf("\nElement %d found", key);
    else
        printf("\nElement not found");
    delete(root, 5);
    printf("\n");
    InOrder(root);

}
