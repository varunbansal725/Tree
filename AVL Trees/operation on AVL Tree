#include <stdio.h>
#include <stdlib.h>

struct Node {
    struct Node *lchild;
    int data;
    int height;
    struct Node *rchild;
}*root=NULL;

int nodeHeight(struct Node *p) {
    int hl, hr;
    hl=p && p->lchild ? p->lchild->height:0;
    hr=p && p->rchild ? p->rchild->height:0;
    return hl>hr?hl+1:hr+1;
}

int balanceFactor(struct Node *p) {
    int hl, hr;
    hl=p && p->lchild ? p->lchild->height:0;
    hr=p && p->rchild ? p->rchild->height:0;
    return hl-hr;
}

struct Node * LLRotation(struct Node *p) {
    struct Node *pl, *plr;
    pl=p->lchild;
    plr=pl->rchild;
    pl->rchild=p;
    p->lchild=plr;
    p->height=nodeHeight(p);
    pl->height=nodeHeight(pl);
    if(root==p)
        root=pl;
    return pl;
}

struct Node * insert(struct Node *p, int key) {
    struct Node *newnode;
    if(p==NULL) {
        newnode=(struct Node *)malloc(sizeof(struct Node));
        newnode->data=key;
        newnode->lchild=newnode->rchild=NULL;
        newnode->height=1;
        return newnode;
    }
    if(key < p->data)
        p->lchild=insert(p->lchild, key);
    else if(key > p->data)
        p->rchild=insert(p->rchild, key);

    p->height=nodeHeight(p);
    if(balanceFactor(p)==2 && balanceFactor(p->lchild)==1)
        return LLRotation(p);
    return p;
}

void inorder(struct Node *p) {
    if(p) {
        inorder(p->lchild);
        printf("%d ", p->data);
        inorder(p->rchild);
    }
}

void preorder(struct Node *p) {
    if(p) {
        printf("%d ", p->data);
        preorder(p->lchild);
        preorder(p->rchild);
    }
}

void main()
{
    root=insert(root, 5);
    insert(root, 3);
    insert(root, 2);
    preorder(root);

}
